<?xml version="1.0" encoding="utf-8" standalone="yes" ?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <title>Articles on Simon says</title>
    <link>http://simonmika.com/article/</link>
    <description>Recent content in Articles on Simon says</description>
    <generator>Hugo -- gohugo.io</generator>
    <language>en-us</language>
    <lastBuildDate>Thu, 29 Sep 2016 08:15:46 +0200</lastBuildDate>
    <atom:link href="http://simonmika.com/article/index.xml" rel="self" type="application/rss+xml" />
    
    <item>
      <title>Abstractions</title>
      <link>http://simonmika.com/article/abstractions/</link>
      <pubDate>Thu, 29 Sep 2016 08:15:46 +0200</pubDate>
      
      <guid>http://simonmika.com/article/abstractions/</guid>
      <description>&lt;p&gt;We humans can in our head only concurrently work with about eight items. If we try to work with significantly more we will lose some items. It is the human equivalent of a stack overflow. Our stack has a maximum depth of about eight. In order to handle more we need to bundle items together into a new item. It is the equivalent of grouping them together in a data structure and putting them into the heap and just store the pointer to it all on the stack.&lt;/p&gt;

&lt;p&gt;This is one of the main reasons programming is all about creating abstractions. Abstractions enable us to reason about bigger chunks of code. Well done, they also enable us to cooperate in large groups.&lt;/p&gt;

&lt;p&gt;Lack of abstractions is the single most common reason for technical depth in software. This probably comes from the fact that programming is to instruct a computer, mostly in a linear manner. It is like constructing a new car model using step by step instruction of how to manufacture and combine the parts, without separating the instructions into parts and subassemblies. Like starting the instructions with take a peace of steel and place it in the lathe and then continue in a similar manner until the factory roll out. The bigger picture is lost in all the details.&lt;/p&gt;

&lt;p&gt;When we program we need to spend more time thinking about the bigger picture, how the different parts interact and focus less on how the perform their tasks inside the black box. If we get the first part right the later is a lot easier to fix later. If it even needs fixing.&lt;/p&gt;
</description>
    </item>
    
    <item>
      <title>Recruiting Process</title>
      <link>http://simonmika.com/article/recruiting-process/</link>
      <pubDate>Tue, 27 Sep 2016 23:18:43 +0200</pubDate>
      
      <guid>http://simonmika.com/article/recruiting-process/</guid>
      <description>&lt;p&gt;Good programmers are more like artists then sweatshop workers. If we are serious about recruiting good programmers we should not treat them like sweatshop workers.&lt;/p&gt;

&lt;p&gt;An employment is somewhat like a marriage. The relationship starts by finding a partner on a dating/job listing site or thru the referral of a trusted friend. After that you start dating/interviewing. After a period of dating/interviewing you end up writing a marriage/employment contract.&lt;/p&gt;

&lt;p&gt;One of the keys to a successful dating/interviewing is for it to be reciprocal. You tell me something about you and I tell you something about me. We both spend time together.&lt;/p&gt;

&lt;p&gt;Some, mostly bigger, companies forget the reciprocal part. For them it is all about efficient selection. Like they are buyers on some kind of slave market. Send us your resume. Fill out this form. Do this task. They forget about courting the future employee and inspiring them to join.&lt;/p&gt;

&lt;p&gt;On every step in our recruiting process we should not only think about what new information we will get about the candidate but we should also think hard about what the candidate will learn about us. If we don&amp;rsquo;t we will likely end up loosing the best, most qualified and most attractive candidates. It is after all an employees market.&lt;/p&gt;
</description>
    </item>
    
    <item>
      <title>Rock Star Programmers</title>
      <link>http://simonmika.com/article/rock-star-programmers/</link>
      <pubDate>Tue, 27 Sep 2016 23:18:43 +0200</pubDate>
      
      <guid>http://simonmika.com/article/rock-star-programmers/</guid>
      <description>&lt;p&gt;Sometimes I come across programmers that view themselves as rock stars. Some even label themselves code ninjas. As if they are some kind of programming super hero with special powers.&lt;/p&gt;

&lt;p&gt;While a do realize where this comes from. A good programmer can easily be more then ten times as productive as an average one. We do also need good raw models and front figures for our profession.&lt;/p&gt;

&lt;p&gt;But programming is almost never a one man show. Most real world projects are impossible to finish yourself within a reasonable time. They are team efforts. Therefore a real programming hero is a someone who not only is a very productive expert but who also helps the rest of the team to reach their full potential by mentoring and encouraging them.&lt;/p&gt;

&lt;p&gt;The rock star attitude is the opposite of the humble and encouraging attitude a good mentor. So let us stop talking about code ninjas as a good thing and instead let us celebrate the mentors.&lt;/p&gt;
</description>
    </item>
    
    <item>
      <title>CSS is Still Broken</title>
      <link>http://simonmika.com/article/css-broken/</link>
      <pubDate>Thu, 18 Aug 2016 23:18:43 +0200</pubDate>
      
      <guid>http://simonmika.com/article/css-broken/</guid>
      <description>&lt;p&gt;The purpose of CSS is to describe the presentation of a document. It is created to enable &lt;a href=&#34;https://en.wikipedia.org/wiki/Separation_of_presentation_and_content&#34;&gt;separation of presentation and content&lt;/a&gt;. So far CSS has been improving the situation. We have been able to move more and more presentation out of our documents and into CSS.&lt;/p&gt;

&lt;p&gt;But even today, almost 20 years after CSS was initially released, I still can&amp;rsquo;t just put all my content in an HTML-document and never have to rearrange it when i create the presentation. The order and nesting of my HTML-formated content always needs to be adopted to the layout I want to achieve with my CSS.&lt;/p&gt;

&lt;p&gt;Let us consider a simple example:&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-html&#34;&gt;&amp;lt;doctype html&amp;gt;
&amp;lt;html&amp;gt;
	&amp;lt;header&amp;gt;
		&amp;lt;meta http-equiv=&amp;quot;content-type&amp;quot; content=&amp;quot;text/html; charset=utf-8&amp;quot;&amp;gt;
		&amp;lt;title&amp;gt;Page Title&amp;lt;title&amp;gt;
	&amp;lt;header&amp;gt;
	&amp;lt;body&amp;gt;
		&amp;lt;header&amp;gt;
		&amp;lt;header&amp;gt;
		&amp;lt;nav&amp;gt;
		&amp;lt;/nav&amp;gt;
		&amp;lt;article&amp;gt;
		&amp;lt;/article&amp;gt;
		&amp;lt;footer&amp;gt;
		&amp;lt;/footer&amp;gt;
	&amp;lt;body&amp;gt;
&amp;lt;/html&amp;gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;Why should I need to change the markup if I want to render the header and nav elements together as one unit. Today I still need to change my markup in order to achieve the layout I want. That is kind of broken as it defeats the purpose of separating style from content.&lt;/p&gt;

&lt;p&gt;CSS needs a way to change:&lt;/p&gt;

&lt;ol&gt;
&lt;li&gt;The order of elements.&lt;/li&gt;
&lt;li&gt;The nesting of elements.&lt;/li&gt;
&lt;li&gt;Combine elements under a new parent.&lt;/li&gt;
&lt;li&gt;Turn an element into a link.&lt;/li&gt;
&lt;/ol&gt;

&lt;p&gt;So far I no clue how that would look in CSS. Maybe it is time for something totally new.&lt;/p&gt;
</description>
    </item>
    
    <item>
      <title>To Live</title>
      <link>http://simonmika.com/article/to-live/</link>
      <pubDate>Thu, 18 Aug 2016 21:31:21 +0200</pubDate>
      
      <guid>http://simonmika.com/article/to-live/</guid>
      <description>&lt;p&gt;Life is about three things:&lt;/p&gt;

&lt;ol&gt;
&lt;li&gt;&lt;em&gt;Create&lt;/em&gt; and improve things.&lt;/li&gt;
&lt;li&gt;&lt;em&gt;Learn&lt;/em&gt; new things.&lt;/li&gt;
&lt;li&gt;&lt;em&gt;Help&lt;/em&gt; other people.&lt;/li&gt;
&lt;/ol&gt;

&lt;p&gt;They are all about improving ourselves and the world around us. The day we stop to do them we start dying.&lt;/p&gt;
</description>
    </item>
    
  </channel>
</rss>